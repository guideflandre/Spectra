labelPos = labelPos, labelOffset = labelOffset,
orientation = -1, labelCol = labelCol, ...)
idx <- which(common(y_data[, "mz"], x_data[, "mz"],
tolerance = tolerance, ppm = ppm))
if (length(idx)) {
plot.xy(xy.coords(y_data[idx, "mz"], -y_data[idx, "intensity"]),
type = "h", col = matchCol, lwd = matchLwd, ...)
plot.xy(xy.coords(y_data[idx, "mz"], -y_data[idx, "intensity"]),
type = "p", col = matchCol, pch = matchPch, ...)
}
abline(h = 0)
})
#' @description
#'
#' Plot a single spectrum (m/z on x against intensity on y) with the optional
#' possibility to label the individual peaks.
#'
#' @author Johannes Rainer, Sebastian Gibb
#'
#' @importFrom graphics axis box plot.new plot.window plot.xy strwidth
#'
#' @importFrom graphics text title
#'
#' @importFrom grDevices dev.flush dev.hold xy.coords
#'
#' @examples
#'
#' ints <- c(4.3412, 12, 8, 34, 23.4)
#' mzs <- c(13.453421, 43.433122, 46.6653553, 129.111212, 322.24432)
#'
#' df <- DataFrame(msLevel = 1L, rtime = 123.12)
#' df$mz <- list(mzs)
#' df$intensity <- list(ints)
#' sp <- Spectra(df)
#'
#' .plot_single_spectrum(sp, main = "hello")
#' .plot_single_spectrum(sp, bty = "n")
#' .plot_single_spectrum(sp, frame.plot = FALSE)
#'
#' .plot_single_spectrum(sp, col = 1:5)
#'
#' .plot_single_spectrum(sp, labels = 1:5, col = 1:5)
#'
#' .plot_single_spectrum(sp, labels = format(mz(sp)[[1]], digits = 5),
#'     labelPos = 2, labelOffset = 0.1, labelSrt = -30)
#' grid()
#' .plot_single_spectrum(sp, col = "red", type = "p", add = TRUE)
#'
#' .plot_single_spectrum(sp,
#'     labels = function(z) format(mz(z)[[1]], digits = 5),
#'     labelPos = 2, labelOffset = 0.1, labelSrt = -30)
#' grid()
#'
#' @noRd
.plot_single_spectrum <- function(x, xlab = "m/z", ylab = "intensity",
type = "h", xlim = numeric(),
ylim = numeric(),
main = paste("RT", round(rtime(x), 1)),
col = "#00000080", labels = character(),
labelCol = col, labelCex = 1, labelSrt = 0,
labelAdj = NULL, labelPos = NULL,
labelOffset = 0.5, add = FALSE,
axes = TRUE, frame.plot = axes,
orientation = 1, ...) {
v <- peaksData(x)[[1L]]
mzs <- v[, "mz"]
ints <- orientation * v[, "intensity"]
if (!length(xlim))
suppressWarnings(xlim <- range(mzs, na.rm = TRUE))
if (!length(ylim))
suppressWarnings(
ylim <- range(orientation * c(0, max(abs(ints), na.rm = TRUE))))
if (any(is.infinite(xlim)))
xlim <- c(0, 0)
if (any(is.infinite(ylim)))
ylim <- c(0, 0)
if (!add) {
dev.hold()
on.exit(dev.flush())
plot.new()
plot.window(xlim = xlim, ylim = ylim)
}
if (length(labels)) {
if (is.function(labels))
labels <- labels(x)
wdths <- max(strwidth(labels, cex = labelCex)) / 2
usr_lim <- par("usr")
ylim[2L] <- ylim[2L] + wdths * diff(usr_lim[3:4]) / diff(usr_lim[1:2])
xlim[1L] <- xlim[1L] - wdths
xlim[2L] <- xlim[2L] + wdths
if (!add)
plot.window(xlim = xlim, ylim = ylim, ...)
}
if (!add) {
if (axes) {
axis(side = 1, ...)
axis(side = 2, ...)
}
if (frame.plot)
box(...)
title(main = main, xlab = xlab, ylab = ylab, ...)
}
plot.xy(xy.coords(mzs, ints), type = type, col = col, ...)
if (length(labels))
text(mzs, ints, labels = labels, adj = labelAdj, pos = labelPos,
col = labelCol, cex = labelCex, srt = labelSrt,
offset = labelOffset)
}
addFragments <- function(x, tolerance = 0, ppm = 20, ...) {
stopifnot(requireNamespace("Spectra"))
stopifnot(inherits(x, "Spectra"))
super_labels <- vector("list", length = length(x))
for (j in seq_along(x)) {
stopifnot("sequence" %in% Spectra::spectraVariables(x[j]))
y <- Spectra::spectraData(x[j])[["sequence"]]
x_data <- Spectra::peaksData(x[j])[[1L]]
y_data <- calculateFragments(y, verbose = FALSE, ...)
y_data <- split(y_data, y_data$peptide)
labels <- vector("list", length = length(y_data))
names(labels) <- names(y_data)
for (i in seq_along(y_data)) {
y_data[[i]] <- y_data[[i]][order(y_data[[i]]$mz),
]
idx <- which(MsCoreUtils::common(x_data[, "mz"],
y_data[[i]][, "mz"],
tolerance = tolerance,
ppm = ppm))
idy <- which(MsCoreUtils::common(y_data[[i]][, "mz"],
x_data[, "mz"],
tolerance = tolerance,
ppm = ppm))
labels[[i]] <- rep(NA_character_, nrow(x_data))
labels[[i]][idx] <- y_data[[i]][idy, "ion"]
attr(labels[[i]], "spectrumNumber") <- j
}
super_labels[[j]] <- labels
}
unlist(super_labels, recursive = FALSE)
}
library(PSMatch)
library(identifieR)
data("sc")
plotSpectra(sc[532])
plotSpectra(sc[532], labels = addFragments)
plotSpectra(sc[532])
plotSpectra(sc[532], labels = addFragments)
plotSpectra(sc[532], labels = addFragments(sc[532]))
plotSpectra(sc[532], labels = .GlobalEnv::addFragments(sc[532]))
plotSpectra(sc[532:534], labels = addFragments)
plotSpectra(sc[532], labels = addFragments(sc[532]))
addFragments(sc[532])
addFragments(sc[1])
sc[1]
sc[1]$sequence
addFragments(sc[1])
addFragments <- function(x, tolerance = 0, ppm = 20, ...) {
stopifnot(requireNamespace("Spectra"))
stopifnot(inherits(x, "Spectra"))
super_labels <- vector("list", length = length(x))
for (j in seq_along(x)) {
stopifnot("sequence" %in% Spectra::spectraVariables(x[j]))
y <- Spectra::spectraData(x[j])[["sequence"]]
x_data <- Spectra::peaksData(x[j])[[1L]]
y_data <- calculateFragments(y, verbose = FALSE, ...)
y_data <- split(y_data, y_data$peptide)
labels <- vector("list", length = length(y_data))
names(labels) <- names(y_data)
for (i in seq_along(y_data)) {
y_data[[i]] <- y_data[[i]][order(y_data[[i]]$mz),
]
idx <- which(MsCoreUtils::common(x_data[, "mz"],
y_data[[i]][, "mz"],
tolerance = tolerance,
ppm = ppm))
idy <- which(MsCoreUtils::common(y_data[[i]][, "mz"],
x_data[, "mz"],
tolerance = tolerance,
ppm = ppm))
labels[[i]] <- rep(NA_character_, nrow(x_data))
labels[[i]][idx] <- y_data[[i]][idy, "ion"]
attr(labels[[i]], "spectrumNumber") <- j
}
super_labels[[j]] <- labels
}
unlist(super_labels, recursive = FALSE)
}
addFragments(sc[1])
addFragments(sc[1])
labels
x
sc
x_data
y
n
library(identifieR)
data("sc")
addFragments2(sc[532])
#' @rdname spectra-plotting
#'
#' @importFrom graphics par
#' @importFrom grDevices n2mfrow
#'
#' @export plotSpectra
plotSpectra <- function(x, xlab = "m/z", ylab = "intensity", type = "h",
xlim = numeric(), ylim = numeric(),
main = character(), col = "#00000080",
labels = character(), labelCex = 1, labelSrt = 0,
labelAdj = NULL, labelPos = NULL, labelOffset = 0.5,
labelCol = "#00000080", asp = 1, ...) {
if (!length(main))
main <- paste0("MS", msLevel(x), " RT: ", round(rtime(x), 1))
nsp <- length(x)
if (nsp == 1)
col <- list(col)
if (length(col) != nsp)
col <- rep(col[1], nsp)
if (length(main) != nsp)
main <- rep(main[1], nsp)
if (nsp > 1)
par(mfrow = n2mfrow(nsp, asp = asp))
if (length(labels)) {
if (is.function(labels)) {
labels <- labels(x)
}
mod_check <- sapply(labels, function(labels) attr(labels, "spectrumNumber"))
if (length(mod_check) != length(x))
stop("Variable modifications are not yet supported.")
} else {labels <- NULL}
for (i in seq_len(nsp))
.plot_single_spectrum(x[i], xlab = xlab, ylab = ylab, type = type,
xlim = xlim, ylim = ylim, main = main[i],
col = col[[i]], labels = labels[[i]],
labelCex = labelCex, labelSrt = labelSrt,
labelAdj = labelAdj, labelPos = labelPos,
labelOffset = labelOffset, labelCol = labelCol,
...)
}
addFragments2(sc[532:534])
plotSpectra(sc[532], labels = addFragments2)
#'     labelPos = 2, labelOffset = 0.1, labelSrt = -30)
#' grid()
#' .plot_single_spectrum(sp, col = "red", type = "p", add = TRUE)
#'
#' .plot_single_spectrum(sp,
#'     labels = function(z) format(mz(z)[[1]], digits = 5),
#'     labelPos = 2, labelOffset = 0.1, labelSrt = -30)
#' grid()
#'
#' @noRd
.plot_single_spectrum <- function(x, xlab = "m/z", ylab = "intensity",
type = "h", xlim = numeric(),
ylim = numeric(),
main = paste("RT", round(rtime(x), 1)),
col = "#00000080", labels = character(),
labelCol = col, labelCex = 1, labelSrt = 0,
labelAdj = NULL, labelPos = NULL,
labelOffset = 0.5, add = FALSE,
axes = TRUE, frame.plot = axes,
orientation = 1, ...) {
v <- peaksData(x)[[1L]]
mzs <- v[, "mz"]
ints <- orientation * v[, "intensity"]
if (!length(xlim))
suppressWarnings(xlim <- range(mzs, na.rm = TRUE))
if (!length(ylim))
suppressWarnings(
ylim <- range(orientation * c(0, max(abs(ints), na.rm = TRUE))))
if (any(is.infinite(xlim)))
xlim <- c(0, 0)
if (any(is.infinite(ylim)))
ylim <- c(0, 0)
if (!add) {
dev.hold()
on.exit(dev.flush())
plot.new()
plot.window(xlim = xlim, ylim = ylim)
}
if (length(labels)) {
if (is.function(labels))
labels <- labels(x)
wdths <- max(strwidth(labels, cex = labelCex)) / 2
usr_lim <- par("usr")
ylim[2L] <- ylim[2L] + wdths * diff(usr_lim[3:4]) / diff(usr_lim[1:2])
xlim[1L] <- xlim[1L] - wdths
xlim[2L] <- xlim[2L] + wdths
if (!add)
plot.window(xlim = xlim, ylim = ylim, ...)
}
if (!add) {
if (axes) {
axis(side = 1, ...)
axis(side = 2, ...)
}
if (frame.plot)
box(...)
title(main = main, xlab = xlab, ylab = ylab, ...)
}
plot.xy(xy.coords(mzs, ints), type = type, col = col, ...)
if (length(labels))
text(mzs, ints, labels = labels, adj = labelAdj, pos = labelPos,
col = labelCol, cex = labelCex, srt = labelSrt,
offset = labelOffset)
}
plotSpectra(sc[532], labels = addFragments2)
plotSpectra(sc[532:534], labels = addFragments2)
plotSpectra(sc[532:534], labels = addFragments2sc[532:534][[1]])
plotSpectra(sc[532:534], labels = addFragments2(sc[532:534][[1]]))
addFragments2(sc[532:534][[1]]
)
addFragments2(sc[532:534])[[1]]
plotSpectra(sc[532:534], labels = addFragments2(sc[532:534])[[1]])
#' @rdname spectra-plotting
#'
#' @export plotSpectraOverlay
plotSpectraOverlay <- function(x, xlab = "m/z", ylab = "intensity",
type = "h", xlim = numeric(),
ylim = numeric(),
main = paste(length(x), "spectra"),
col = "#00000080", labels = character(),
labelCex = 1, labelSrt = 0,
labelAdj = NULL, labelPos = NULL,
labelOffset = 0.5, labelCol = "#00000080",
axes = TRUE, frame.plot = axes, ...) {
nsp <- length(x)
if (nsp == 1)
col <- list(col)
if (length(col) != nsp)
col <- rep(col[1], nsp)
if (!length(xlim))
xlim <- range(unlist(mz(x)), na.rm = TRUE)
if (!length(ylim))
ylim <- c(0, max(unlist(intensity(x)), na.rm = TRUE))
dev.hold()
on.exit(dev.flush())
plot.new()
plot.window(xlim = xlim, ylim = ylim)
if (axes) {
axis(side = 1, ...)
axis(side = 2, ...)
}
if (frame.plot)
box(...)
title(main = main, xlab = xlab, ylab = ylab, ...)
if (length(labels)) {
if (is.function(labels)) {
labels <- labels(x)
}
browser()
mod_check <- sapply(labels, function(labels) attr(labels, "spectrumNumber"))
if (length(mod_check) != length(x))
stop("Variable modifications are not yet supported.")
} else {labels <- NULL}
for (i in seq_len(nsp))
.plot_single_spectrum(x[i], add = TRUE, type = type, col = col[[i]],
labels = labels[[i]], labelCex = labelCex,
labelSrt = labelSrt, labelAdj = labelAdj,
labelPos = labelPos, labelOffset = labelOffset,
labelCol = labelCol, ...)
}
plotSpectraOverlay(sc[532:534], labels = addFragments2(sc[532:534])
)
sapply(labels, function(labels) attr(labels, "spectrumNumber"))
addFragments2(sc[532:534], variable_modifications = c(D = 5))
sapply(addFragments2(sc[532:534], variable_modifications = c(D = 5)), function(labels) attr(labels, "spectrumNumber"))
#' @rdname spectra-plotting
#'
#' @export plotSpectraOverlay
plotSpectraOverlay <- function(x, xlab = "m/z", ylab = "intensity",
type = "h", xlim = numeric(),
ylim = numeric(),
main = paste(length(x), "spectra"),
col = "#00000080", labels = character(),
labelCex = 1, labelSrt = 0,
labelAdj = NULL, labelPos = NULL,
labelOffset = 0.5, labelCol = "#00000080",
axes = TRUE, frame.plot = axes, ...) {
nsp <- length(x)
if (nsp == 1)
col <- list(col)
if (length(col) != nsp)
col <- rep(col[1], nsp)
if (!length(xlim))
xlim <- range(unlist(mz(x)), na.rm = TRUE)
if (!length(ylim))
ylim <- c(0, max(unlist(intensity(x)), na.rm = TRUE))
dev.hold()
on.exit(dev.flush())
plot.new()
plot.window(xlim = xlim, ylim = ylim)
if (axes) {
axis(side = 1, ...)
axis(side = 2, ...)
}
if (frame.plot)
box(...)
title(main = main, xlab = xlab, ylab = ylab, ...)
if (length(labels)) {
if (is.function(labels)) {
labels <- labels(x)
}
if (length(labels) != length(x))
stop("Please provide a list of annotations of `length(x)`.")
} else {labels <- NULL}
for (i in seq_len(nsp))
.plot_single_spectrum(x[i], add = TRUE, type = type, col = col[[i]],
labels = labels[[i]], labelCex = labelCex,
labelSrt = labelSrt, labelAdj = labelAdj,
labelPos = labelPos, labelOffset = labelOffset,
labelCol = labelCol, ...)
}
plotSpectraOverlay(sc[532:534], labels = addFragments2(sc[532:533])
)
plotSpectraOverlay(sc[532:534], labels = addFragments2(sc[532:533]))
plotSpectraOverlay(sc[532:534], labels = addFragments2(sc[532:533]))
dev.off()
plotSpectraOverlay(sc[532:534], labels = addFragments2(sc[532:533]))
addFragments2(sc[532:533])
length(addFragments2(sc[532:533]))
length(sc[532:534])
#' @rdname spectra-plotting
#'
#' @export plotSpectraOverlay
plotSpectraOverlay <- function(x, xlab = "m/z", ylab = "intensity",
type = "h", xlim = numeric(),
ylim = numeric(),
main = paste(length(x), "spectra"),
col = "#00000080", labels = character(),
labelCex = 1, labelSrt = 0,
labelAdj = NULL, labelPos = NULL,
labelOffset = 0.5, labelCol = "#00000080",
axes = TRUE, frame.plot = axes, ...) {
nsp <- length(x)
if (nsp == 1)
col <- list(col)
if (length(col) != nsp)
col <- rep(col[1], nsp)
if (!length(xlim))
xlim <- range(unlist(mz(x)), na.rm = TRUE)
if (!length(ylim))
ylim <- c(0, max(unlist(intensity(x)), na.rm = TRUE))
dev.hold()
on.exit(dev.flush())
plot.new()
plot.window(xlim = xlim, ylim = ylim)
if (axes) {
axis(side = 1, ...)
axis(side = 2, ...)
}
if (frame.plot)
box(...)
title(main = main, xlab = xlab, ylab = ylab, ...)
if (length(labels)) {
if (is.function(labels)) {
labels <- labels(x)
}
if (length(labels) != length(x))
stop("Please provide a list of annotations of `length(x)`.")
} else {labels <- NULL}
for (i in seq_len(nsp))
.plot_single_spectrum(x[i], add = TRUE, type = type, col = col[[i]],
labels = labels[[i]], labelCex = labelCex,
labelSrt = labelSrt, labelAdj = labelAdj,
labelPos = labelPos, labelOffset = labelOffset,
labelCol = labelCol, ...)
}
plotSpectraOverlay(sc[532:534], labels = addFragments2(sc[532:533]))
#' @rdname spectra-plotting
#'
#' @export plotSpectraOverlay
plotSpectraOverlay <- function(x, xlab = "m/z", ylab = "intensity",
type = "h", xlim = numeric(),
ylim = numeric(),
main = paste(length(x), "spectra"),
col = "#00000080", labels = character(),
labelCex = 1, labelSrt = 0,
labelAdj = NULL, labelPos = NULL,
labelOffset = 0.5, labelCol = "#00000080",
axes = TRUE, frame.plot = axes, ...) {
nsp <- length(x)
if (nsp == 1)
col <- list(col)
if (length(col) != nsp)
col <- rep(col[1], nsp)
if (!length(xlim))
xlim <- range(unlist(mz(x)), na.rm = TRUE)
if (!length(ylim))
ylim <- c(0, max(unlist(intensity(x)), na.rm = TRUE))
dev.hold()
on.exit(dev.flush())
plot.new()
plot.window(xlim = xlim, ylim = ylim)
if (axes) {
axis(side = 1, ...)
axis(side = 2, ...)
}
if (frame.plot)
box(...)
title(main = main, xlab = xlab, ylab = ylab, ...)
if (length(labels)) {
if (is.function(labels)) {
labels <- labels(x)
}
if (length(labels) != length(x))
stop("Please provide a list of annotations of 'length == length(x)'.")
} else {labels <- NULL}
for (i in seq_len(nsp))
.plot_single_spectrum(x[i], add = TRUE, type = type, col = col[[i]],
labels = labels[[i]], labelCex = labelCex,
labelSrt = labelSrt, labelAdj = labelAdj,
labelPos = labelPos, labelOffset = labelOffset,
labelCol = labelCol, ...)
}
